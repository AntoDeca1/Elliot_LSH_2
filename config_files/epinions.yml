experiment:
  backend: pytorch
  dataset: epinions
  data_config:
    strategy: dataset
    dataset_path: ../data/epinions/dataset.tsv
  prefiltering:
    - strategy: global_threshold
      threshold: 4
    - strategy: iterative_k_core
      core: 2
  binarize: True
  splitting:
    save_on_disk: True
    save_folder: ../data/{0}/splitting/
    test_splitting:
      test_ratio: 0.2
      strategy: random_subsampling
      #folds: 5
  top_k: 50
  evaluation:
    cutoffs: 20 #[ 10, 20, 50 ]
    simple_metrics: [ nDCGRendle2020, Recall, HR, Precision, MAP, MRR ] #nDCG
  gpu: 1
  external_models_path: ../external/models/__init__.py
  plot_lsh: True #Added to plot the lsh results
  comparison_lsh: True
  models:
    UserKNN:
      meta:
        save_recs: True
        verbose: True
        #hyper_max_evals: 20
        hyper_opt_alg: grid #tpe
      neighbors: 300 # Sostutire con il valore migliore delle baselines
      nbits: [ 2,4,8,16,32,64,128,256,512 ] #[ 4,8,12,16,32,64,128 ]
      ntables: 1 #[ 1,2,4,8,12,16 ] #Set to 1 for a comparison with rp_faiss
      similarity: rp_faiss #[cosine,rp_custom,rp_faiss,rp_hash_tables]
    ItemKNN:
      meta:
        save_recs: True
        verbose: True
        #hyper_max_evals: 20
        hyper_opt_alg: grid #tpe
      neighbors: 600 #Sostutire con il valore migliore delle baselines
      nbits: [ 2,4,8,16,32,64,128,256,512 ] #[ 4,8,12,16,32,64,128 ]
      ntables: 1 #[ 1,2,4,8,12,16 ] #Set to 1 for a comparison with rp_faiss
      similarity: rp_faiss #[cosine,rp_custom,rp_faiss,rp_hash_tables]

